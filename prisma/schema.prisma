// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  NORMAL
  ADMIN
}

enum LoanStatus {
  LOANED
  RETURNED
  OVERDUE
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  PAID
}

model User {
  id        String   @id @default(uuid())
  name      String
  userName  String   @unique
  password  String
  role      Role     @default(NORMAL)
  creditTrackers      CreditTracker[]
}

model Client {
  id        String   @id @default(uuid())
  name      String          
  telephone String
  cart      Json?
  creditTrackers CreditTracker[]
}


model Product {
  id            String   @id @default(uuid())
  categoryId    String
  brandId       String
  unitPrice     Int
  quantity      Int
  productName   String   @unique

  category     Category     @relation(fields: [categoryId], references: [id])
  brand        Brand        @relation(fields: [brandId], references: [id])

  stockTracker   StockTracker?
  creditTrackers CreditTracker[]
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}



model StockTracker {
  id            String   @id @default(uuid())
  productId     String   @unique
  product       Product  @relation(fields: [productId], references: [id])

  addingTracker Json     // JSON logs of added stock
  soldTracker   Json     // JSON logs of sold stock

  createdAt     DateTime @default(now())
}

model CreditTracker {
  id              String         @id @default(uuid())
  productId       String
  product         Product        @relation(fields: [productId], references: [id])

  clientId        String
  client          Client         @relation(fields: [clientId], references: [id])

  userId          String
  user            User           @relation(fields: [userId], references: [id])

  qty             Int
  pricePerUnit    Float
  amountPaid      Float          @default(0)
  remainingAmount Float

  creditDate      DateTime       @default(now())
  returnDate      DateTime?

  status          LoanStatus     @default(LOANED)
  paymentStatus   PaymentStatus  @default(PENDING)

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}